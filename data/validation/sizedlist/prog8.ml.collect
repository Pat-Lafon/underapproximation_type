General Collection:
New Blocks:
Old Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int list | emp v] 
 ⊢ Nil : int list :
[v:int list | emp v]
" ]
  node1 [ label = "_x5:[v:int | v == s]
_12:[v:int list | emp v]
_x12:[v:int list | ∃_x12, (hd _x12 _x5 ∧ tl _x12 _12 ∧ v == _x12)] 
 ⊢ let (_12) = Nil in let (_x5) = s in Cons (_x5, _12) : int list :
[v:int list | ∃_x12, (hd _x12 _x5 ∧ tl _x12 _12 ∧ v == _x12)]
" ]
  node2 [ label = "_x4:[v:int | true]
_13:[v:int list | emp v]
_x13:[v:int list | ∃_x13, (hd _x13 _x4 ∧ tl _x13 _13 ∧ v == _x13)] 
 ⊢ let (_13) = Nil in let (_x4) = int_gen () in Cons (_x4, _13) : int list :
[v:int list | ∃_x13, (hd _x13 _x4 ∧ tl _x13 _13 ∧ v == _x13)]
" ]
  node3 [ label = "_x5:[v:int | v == s]
_39:[v:int | true]
_40:[v:int list | emp v]
_41:[v:int list | ∃_x13, (hd _x13 _39 ∧ tl _x13 _40 ∧ v == _x13)]
_x18:[v:int list | ∃_x18, (hd _x18 _x5 ∧ tl _x18 _41 ∧ v == _x18)] 
 ⊢ let (_13) = Nil in
let (_x4) = int_gen () in
let (_41) = Cons (_x4, _13) in let (_x5) = s in Cons (_x5, _41) : int list :
[v:int list | ∃_x18, (hd _x18 _x5 ∧ tl _x18 _41 ∧ v == _x18)]
" ]
  node4 [ label = "_x5:[v:int | v == s]
_x5:[v:int | v == s]
_42:[v:int list | emp v]
_43:[v:int list | ∃_x12, (hd _x12 _x5 ∧ tl _x12 _42 ∧ v == _x12)]
_x19:[v:int list | ∃_x19, (hd _x19 _x5 ∧ tl _x19 _43 ∧ v == _x19)] 
 ⊢ let (_12) = Nil in
let (_x5) = s in let (_43) = Cons (_x5, _12) in Cons (_x5, _43) : int list :
[v:int list | ∃_x19, (hd _x19 _x5 ∧ tl _x19 _43 ∧ v == _x19)]
" ]
  node5 [ label = "_x4:[v:int | true]
_47:[v:int | true]
_48:[v:int list | emp v]
_49:[v:int list | ∃_x13, (hd _x13 _47 ∧ tl _x13 _48 ∧ v == _x13)]
_x20:[v:int list | ∃_x20, (hd _x20 _x4 ∧ tl _x20 _49 ∧ v == _x20)] 
 ⊢ let (_13) = Nil in
let (_x4) = int_gen () in let (_49) = Cons (_x4, _13) in Cons (_x4, _49) : int list :
[v:int list | ∃_x20, (hd _x20 _x4 ∧ tl _x20 _49 ∧ v == _x20)]
" ]
  node6 [ label = "_x4:[v:int | true]
_x5:[v:int | v == s]
_63:[v:int list | emp v]
_64:[v:int list | ∃_x12, (hd _x12 _x5 ∧ tl _x12 _63 ∧ v == _x12)]
_x21:[v:int list | ∃_x21, (hd _x21 _x4 ∧ tl _x21 _64 ∧ v == _x21)] 
 ⊢ let (_12) = Nil in
let (_x5) = s in
let (_64) = Cons (_x5, _12) in let (_x4) = int_gen () in Cons (_x4, _64) : int list :
[v:int list | ∃_x21, (hd _x21 _x4 ∧ tl _x21 _64 ∧ v == _x21)]
" ]
  node7 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_77:[v:int list | emp v]
_x22:[v:int list | ∃_x22, (hd _x22 _x8 ∧ tl _x22 _77 ∧ v == _x22)] 
 ⊢ let (_77) = Nil in let (_x5) = s in let (_x8) = subs _x5 in Cons (_x8, _77) : int list :
[v:int list | ∃_x22, (hd _x22 _x8 ∧ tl _x22 _77 ∧ v == _x22)]
" ]
  node8 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_90:[v:int | true]
_91:[v:int list | emp v]
_92:[v:int list | ∃_x13, (hd _x13 _90 ∧ tl _x13 _91 ∧ v == _x13)]
_x23:[v:int list | ∃_x23, (hd _x23 _x8 ∧ tl _x23 _92 ∧ v == _x23)] 
 ⊢ let (_13) = Nil in
let (_x4) = int_gen () in
let (_92) = Cons (_x4, _13) in
let (_x5) = s in let (_x8) = subs _x5 in Cons (_x8, _92) : int list :
[v:int list | ∃_x23, (hd _x23 _x8 ∧ tl _x23 _92 ∧ v == _x23)]
" ]
  node9 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x5:[v:int | v == s]
_118:[v:int list | emp v]
_119:[v:int list | ∃_x12, (hd _x12 _x5 ∧ tl _x12 _118 ∧ v == _x12)]
_x24:[v:int list | ∃_x24, (hd _x24 _x8 ∧ tl _x24 _119 ∧ v == _x24)] 
 ⊢ let (_12) = Nil in
let (_x5) = s in
let (_119) = Cons (_x5, _12) in let (_x8) = subs _x5 in Cons (_x8, _119) : int list :
[v:int list | ∃_x24, (hd _x24 _x8 ∧ tl _x24 _119 ∧ v == _x24)]
" ]

  node0 [ shape = box, color = green ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node1
  node2 -> node7
  node3 -> node4
  node4 [ shape = box, color = red ]
  node5 [ shape = box, color = blue ]
  node5 -> node8
  node5 -> node6
  node5 -> node3
  node6 -> node4
  node6 -> node9
  node7 [ shape = box, color = red ]
  node8 -> node9
  node9 [ shape = box, color = red ]
}
Type: bool
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x17:[v:bool | ∃_x17, ((_x17 <=> _x8 == 0) ∧ (¬_x17 <=> _x8 > 0) ∧ v == _x17)] 
 ⊢ let (_x5) = s in let (_x8) = subs _x5 in sizecheck _x8 : bool :
[v:bool | ∃_x17, ((_x17 <=> _x8 == 0) ∧ (¬_x17 <=> _x8 > 0) ∧ v == _x17)]
" ]
  node1 [ label = "_x5:[v:int | v == s]
_x10:[v:bool | ∃_x10, ((_x10 <=> _x5 == 0) ∧ (¬_x10 <=> _x5 > 0) ∧ v == _x10)] 
 ⊢ let (_x5) = s in sizecheck _x5 : bool :
[v:bool | ∃_x10, ((_x10 <=> _x5 == 0) ∧ (¬_x10 <=> _x5 > 0) ∧ v == _x10)]
" ]
  node2 [ label = "_x3:[v:bool | true] 
 ⊢ bool_gen () : bool :
[v:bool | true]
" ]
  node3 [ label = "_x1:[v:bool | ¬v] 
 ⊢ False : bool :
[v:bool | ¬v]
" ]
  node4 [ label = "_x0:[v:bool | v] 
 ⊢ True : bool :
[v:bool | v]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node0
  node2 -> node4
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
  node4 [ shape = box, color = red ]
}
Type: int
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x16:[v:int | v == (_x8 - 1)] 
 ⊢ let (_x5) = s in let (_x8) = subs _x5 in subs _x8 : int :
[v:int | v == (_x8 - 1)]
" ]
  node1 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)] 
 ⊢ let (_x5) = s in subs _x5 : int :
[v:int | v == (_x5 - 1)]
" ]
  node2 [ label = "_x4:[v:int | true] 
 ⊢ int_gen () : int :
[v:int | true]
" ]
  node3 [ label = "_x5:[v:int | v == s] 
 ⊢ s : int :
[v:int | v == s]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node0
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
}
Path Specific Collection:
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
New Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x16:[v:int | v == (_x8 - 1)]
_451:[v:int list | emp v]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_x49:[v:int list | ∃_x49, (hd _x49 _x16 ∧ tl _x49 _451 ∧ v == _x49)] 
 ⊢ let (_451) = Nil in
let (_x5) = s in
let (_x8) = subs _x5 in let (_x16) = subs _x8 in Cons (_x16, _451) : int list :
[v:int list | ∃_x49, (hd _x49 _x16 ∧ tl _x49 _451 ∧ v == _x49)]
" ]
  node1 [ label = "_x5:[v:int | v == s]
_x5:[v:int | v == s]
_480:[v:int | v == (_x5 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_481:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _480 ∧ (∃_x25, ((∃n, (len _x25 n ∧ n <= s_5)) ∧ v == _x25)))]
_x58:[v:int list | ∃_x58, (hd _x58 _x5 ∧ tl _x58 _481 ∧ v == _x58)] 
 ⊢ let (_x5) = s in
let (_x8) = subs _x5 in let (_481) = sized_list_gen _x8 in Cons (_x5, _481) : int list :
[v:int list | ∃_x58, (hd _x58 _x5 ∧ tl _x58 _481 ∧ v == _x58)]
" ]
  node2 [ label = "_x4:[v:int | true]
_x5:[v:int | v == s]
_482:[v:int | v == (_x5 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_483:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _482 ∧ (∃_x25, ((∃n, (len _x25 n ∧ n <= s_5)) ∧ v == _x25)))]
_x59:[v:int list | ∃_x59, (hd _x59 _x4 ∧ tl _x59 _483 ∧ v == _x59)] 
 ⊢ let (_x5) = s in
let (_x8) = subs _x5 in
let (_483) = sized_list_gen _x8 in let (_x4) = int_gen () in Cons (_x4, _483) : int list :
[v:int list | ∃_x59, (hd _x59 _x4 ∧ tl _x59 _483 ∧ v == _x59)]
" ]
  node3 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x5:[v:int | v == s]
_484:[v:int | v == (_x5 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_485:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _484 ∧ (∃_x25, ((∃n, (len _x25 n ∧ n <= s_5)) ∧ v == _x25)))]
_x60:[v:int list | ∃_x60, (hd _x60 _x8 ∧ tl _x60 _485 ∧ v == _x60)] 
 ⊢ let (_x5) = s in
let (_x8) = subs _x5 in let (_485) = sized_list_gen _x8 in Cons (_x8, _485) : int list :
[v:int list | ∃_x60, (hd _x60 _x8 ∧ tl _x60 _485 ∧ v == _x60)]
" ]
  node4 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x16:[v:int | v == (_x8 - 1)]
_x5:[v:int | v == s]
_486:[v:int | v == (_x5 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_487:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _486 ∧ (∃_x25, ((∃n, (len _x25 n ∧ n <= s_5)) ∧ v == _x25)))]
_x61:[v:int list | ∃_x61, (hd _x61 _x16 ∧ tl _x61 _487 ∧ v == _x61)] 
 ⊢ let (_x5) = s in
let (_x8) = subs _x5 in
let (_487) = sized_list_gen _x8 in let (_x16) = subs _x8 in Cons (_x16, _487) : int list :
[v:int list | ∃_x61, (hd _x61 _x16 ∧ tl _x61 _487 ∧ v == _x61)]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node4
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
  node4 -> node0
}
Old Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_x25:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x8 ∧ (∃_x25, ((∃n, (len _x25 n ∧ n <= s_5)) ∧ v == _x25)))] 
 ⊢ let (_x5) = s in let (_x8) = subs _x5 in sized_list_gen _x8 : int list :
[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x8 ∧ (∃_x25, ((∃n, (len _x25 n ∧ n <= s_5)) ∧ v == _x25)))]
" ]

  node0 [ shape = box, color = green ]
}
