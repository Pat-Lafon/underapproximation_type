General Collection:
New Blocks:
Old Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x0:[v:int list | emp v] 
 ⊢ Nil : int list :
[v:int list | emp v]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_3:[v:int list | emp v]
_x7:[v:int list | ∃_x7, (hd _x7 _x2 ∧ tl _x7 _3 ∧ v == _x7)] 
 ⊢ let (_3) = Nil in let (_x2) = s in Cons (_x2, _3) : int list :
[v:int list | ∃_x7, (hd _x7 _x2 ∧ tl _x7 _3 ∧ v == _x7)]
" ]
  node2 [ label = "_x1:[v:int | true]
_4:[v:int list | emp v]
_x8:[v:int list | ∃_x8, (hd _x8 _x1 ∧ tl _x8 _4 ∧ v == _x8)] 
 ⊢ let (_4) = Nil in let (_x1) = int_gen () in Cons (_x1, _4) : int list :
[v:int list | ∃_x8, (hd _x8 _x1 ∧ tl _x8 _4 ∧ v == _x8)]
" ]
  node3 [ label = "_x2:[v:int | v == s]
_20:[v:int | true]
_21:[v:int list | emp v]
_22:[v:int list | ∃_x8, (hd _x8 _20 ∧ tl _x8 _21 ∧ v == _x8)]
_x12:[v:int list | ∃_x12, (hd _x12 _x2 ∧ tl _x12 _22 ∧ v == _x12)] 
 ⊢ let (_4) = Nil in
let (_x1) = int_gen () in
let (_22) = Cons (_x1, _4) in let (_x2) = s in Cons (_x2, _22) : int list :
[v:int list | ∃_x12, (hd _x12 _x2 ∧ tl _x12 _22 ∧ v == _x12)]
" ]
  node4 [ label = "_x2:[v:int | v == s]
_x2:[v:int | v == s]
_23:[v:int list | emp v]
_24:[v:int list | ∃_x7, (hd _x7 _x2 ∧ tl _x7 _23 ∧ v == _x7)]
_x13:[v:int list | ∃_x13, (hd _x13 _x2 ∧ tl _x13 _24 ∧ v == _x13)] 
 ⊢ let (_3) = Nil in
let (_x2) = s in let (_24) = Cons (_x2, _3) in Cons (_x2, _24) : int list :
[v:int list | ∃_x13, (hd _x13 _x2 ∧ tl _x13 _24 ∧ v == _x13)]
" ]
  node5 [ label = "_x1:[v:int | true]
_28:[v:int | true]
_29:[v:int list | emp v]
_30:[v:int list | ∃_x8, (hd _x8 _28 ∧ tl _x8 _29 ∧ v == _x8)]
_x14:[v:int list | ∃_x14, (hd _x14 _x1 ∧ tl _x14 _30 ∧ v == _x14)] 
 ⊢ let (_4) = Nil in
let (_x1) = int_gen () in let (_30) = Cons (_x1, _4) in Cons (_x1, _30) : int list :
[v:int list | ∃_x14, (hd _x14 _x1 ∧ tl _x14 _30 ∧ v == _x14)]
" ]
  node6 [ label = "_x1:[v:int | true]
_x2:[v:int | v == s]
_44:[v:int list | emp v]
_45:[v:int list | ∃_x7, (hd _x7 _x2 ∧ tl _x7 _44 ∧ v == _x7)]
_x15:[v:int list | ∃_x15, (hd _x15 _x1 ∧ tl _x15 _45 ∧ v == _x15)] 
 ⊢ let (_3) = Nil in
let (_x2) = s in
let (_45) = Cons (_x2, _3) in let (_x1) = int_gen () in Cons (_x1, _45) : int list :
[v:int list | ∃_x15, (hd _x15 _x1 ∧ tl _x15 _45 ∧ v == _x15)]
" ]
  node7 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_58:[v:int list | emp v]
_x16:[v:int list | ∃_x16, (hd _x16 _x5 ∧ tl _x16 _58 ∧ v == _x16)] 
 ⊢ let (_58) = Nil in let (_x2) = s in let (_x5) = subs _x2 in Cons (_x5, _58) : int list :
[v:int list | ∃_x16, (hd _x16 _x5 ∧ tl _x16 _58 ∧ v == _x16)]
" ]
  node8 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_71:[v:int | true]
_72:[v:int list | emp v]
_73:[v:int list | ∃_x8, (hd _x8 _71 ∧ tl _x8 _72 ∧ v == _x8)]
_x17:[v:int list | ∃_x17, (hd _x17 _x5 ∧ tl _x17 _73 ∧ v == _x17)] 
 ⊢ let (_4) = Nil in
let (_x1) = int_gen () in
let (_73) = Cons (_x1, _4) in
let (_x2) = s in let (_x5) = subs _x2 in Cons (_x5, _73) : int list :
[v:int list | ∃_x17, (hd _x17 _x5 ∧ tl _x17 _73 ∧ v == _x17)]
" ]
  node9 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x2:[v:int | v == s]
_99:[v:int list | emp v]
_100:[v:int list | ∃_x7, (hd _x7 _x2 ∧ tl _x7 _99 ∧ v == _x7)]
_x18:[v:int list | ∃_x18, (hd _x18 _x5 ∧ tl _x18 _100 ∧ v == _x18)] 
 ⊢ let (_3) = Nil in
let (_x2) = s in
let (_100) = Cons (_x2, _3) in let (_x5) = subs _x2 in Cons (_x5, _100) : int list :
[v:int list | ∃_x18, (hd _x18 _x5 ∧ tl _x18 _100 ∧ v == _x18)]
" ]

  node0 [ shape = box, color = green ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node1
  node2 -> node7
  node3 -> node4
  node4 [ shape = box, color = red ]
  node5 [ shape = box, color = blue ]
  node5 -> node8
  node5 -> node6
  node5 -> node3
  node6 -> node4
  node6 -> node9
  node7 [ shape = box, color = red ]
  node8 -> node9
  node9 [ shape = box, color = red ]
}
Type: int
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x11:[v:int | v == (_x5 - 1)] 
 ⊢ let (_x2) = s in let (_x5) = subs _x2 in subs _x5 : int :
[v:int | v == (_x5 - 1)]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)] 
 ⊢ let (_x2) = s in subs _x2 : int :
[v:int | v == (_x2 - 1)]
" ]
  node2 [ label = "_x1:[v:int | true] 
 ⊢ int_gen () : int :
[v:int | true]
" ]
  node3 [ label = "_x2:[v:int | v == s] 
 ⊢ s : int :
[v:int | v == s]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node0
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
}
Path Specific Collection:
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
New Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x11:[v:int | v == (_x5 - 1)]
_421:[v:int list | emp v]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_x43:[v:int list | ∃_x43, (hd _x43 _x11 ∧ tl _x43 _421 ∧ v == _x43)] 
 ⊢ let (_421) = Nil in
let (_x2) = s in
let (_x5) = subs _x2 in let (_x11) = subs _x5 in Cons (_x11, _421) : int list :
[v:int list | ∃_x43, (hd _x43 _x11 ∧ tl _x43 _421 ∧ v == _x43)]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_x2:[v:int | v == s]
_450:[v:int | v == (_x2 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_451:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _450 ∧ (∃_x19, ((∃n, (len _x19 n ∧ n <= s_5)) ∧ v == _x19)))]
_x52:[v:int list | ∃_x52, (hd _x52 _x2 ∧ tl _x52 _451 ∧ v == _x52)] 
 ⊢ let (_x2) = s in
let (_x5) = subs _x2 in let (_451) = sized_list_gen _x5 in Cons (_x2, _451) : int list :
[v:int list | ∃_x52, (hd _x52 _x2 ∧ tl _x52 _451 ∧ v == _x52)]
" ]
  node2 [ label = "_x1:[v:int | true]
_x2:[v:int | v == s]
_452:[v:int | v == (_x2 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_453:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _452 ∧ (∃_x19, ((∃n, (len _x19 n ∧ n <= s_5)) ∧ v == _x19)))]
_x53:[v:int list | ∃_x53, (hd _x53 _x1 ∧ tl _x53 _453 ∧ v == _x53)] 
 ⊢ let (_x2) = s in
let (_x5) = subs _x2 in
let (_453) = sized_list_gen _x5 in let (_x1) = int_gen () in Cons (_x1, _453) : int list :
[v:int list | ∃_x53, (hd _x53 _x1 ∧ tl _x53 _453 ∧ v == _x53)]
" ]
  node3 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x2:[v:int | v == s]
_454:[v:int | v == (_x2 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_455:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _454 ∧ (∃_x19, ((∃n, (len _x19 n ∧ n <= s_5)) ∧ v == _x19)))]
_x54:[v:int list | ∃_x54, (hd _x54 _x5 ∧ tl _x54 _455 ∧ v == _x54)] 
 ⊢ let (_x2) = s in
let (_x5) = subs _x2 in let (_455) = sized_list_gen _x5 in Cons (_x5, _455) : int list :
[v:int list | ∃_x54, (hd _x54 _x5 ∧ tl _x54 _455 ∧ v == _x54)]
" ]
  node4 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x11:[v:int | v == (_x5 - 1)]
_x2:[v:int | v == s]
_456:[v:int | v == (_x2 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_457:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _456 ∧ (∃_x19, ((∃n, (len _x19 n ∧ n <= s_5)) ∧ v == _x19)))]
_x55:[v:int list | ∃_x55, (hd _x55 _x11 ∧ tl _x55 _457 ∧ v == _x55)] 
 ⊢ let (_x2) = s in
let (_x5) = subs _x2 in
let (_457) = sized_list_gen _x5 in let (_x11) = subs _x5 in Cons (_x11, _457) : int list :
[v:int list | ∃_x55, (hd _x55 _x11 ∧ tl _x55 _457 ∧ v == _x55)]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node4
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
  node4 -> node0
}
Old Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_x19:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x5 ∧ (∃_x19, ((∃n, (len _x19 n ∧ n <= s_5)) ∧ v == _x19)))] 
 ⊢ let (_x2) = s in let (_x5) = subs _x2 in sized_list_gen _x5 : int list :
[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x5 ∧ (∃_x19, ((∃n, (len _x19 n ∧ n <= s_5)) ∧ v == _x19)))]
" ]

  node0 [ shape = box, color = green ]
}
