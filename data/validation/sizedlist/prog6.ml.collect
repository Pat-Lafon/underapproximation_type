General Collection:
New Blocks:
Old Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x0:[v:int list | emp v] 
 ⊢ Nil : int list :
[v:int list | emp v]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_12:[v:int list | emp v]
_x8:[v:int list | ∃_x8, (hd _x8 _x2 ∧ tl _x8 _12 ∧ v == _x8)] 
 ⊢ let (_12) = Nil in let (_x2) = s in Cons (_x2, _12) : int list :
[v:int list | ∃_x8, (hd _x8 _x2 ∧ tl _x8 _12 ∧ v == _x8)]
" ]
  node2 [ label = "_x1:[v:int | true]
_13:[v:int list | emp v]
_x9:[v:int list | ∃_x9, (hd _x9 _x1 ∧ tl _x9 _13 ∧ v == _x9)] 
 ⊢ let (_13) = Nil in let (_x1) = int_gen () in Cons (_x1, _13) : int list :
[v:int list | ∃_x9, (hd _x9 _x1 ∧ tl _x9 _13 ∧ v == _x9)]
" ]
  node3 [ label = "_x2:[v:int | v == s]
_29:[v:int | true]
_30:[v:int list | emp v]
_31:[v:int list | ∃_x9, (hd _x9 _29 ∧ tl _x9 _30 ∧ v == _x9)]
_x13:[v:int list | ∃_x13, (hd _x13 _x2 ∧ tl _x13 _31 ∧ v == _x13)] 
 ⊢ let (_13) = Nil in
let (_x1) = int_gen () in
let (_31) = Cons (_x1, _13) in let (_x2) = s in Cons (_x2, _31) : int list :
[v:int list | ∃_x13, (hd _x13 _x2 ∧ tl _x13 _31 ∧ v == _x13)]
" ]
  node4 [ label = "_x2:[v:int | v == s]
_x2:[v:int | v == s]
_32:[v:int list | emp v]
_33:[v:int list | ∃_x8, (hd _x8 _x2 ∧ tl _x8 _32 ∧ v == _x8)]
_x14:[v:int list | ∃_x14, (hd _x14 _x2 ∧ tl _x14 _33 ∧ v == _x14)] 
 ⊢ let (_12) = Nil in
let (_x2) = s in let (_33) = Cons (_x2, _12) in Cons (_x2, _33) : int list :
[v:int list | ∃_x14, (hd _x14 _x2 ∧ tl _x14 _33 ∧ v == _x14)]
" ]
  node5 [ label = "_x1:[v:int | true]
_37:[v:int | true]
_38:[v:int list | emp v]
_39:[v:int list | ∃_x9, (hd _x9 _37 ∧ tl _x9 _38 ∧ v == _x9)]
_x15:[v:int list | ∃_x15, (hd _x15 _x1 ∧ tl _x15 _39 ∧ v == _x15)] 
 ⊢ let (_13) = Nil in
let (_x1) = int_gen () in let (_39) = Cons (_x1, _13) in Cons (_x1, _39) : int list :
[v:int list | ∃_x15, (hd _x15 _x1 ∧ tl _x15 _39 ∧ v == _x15)]
" ]
  node6 [ label = "_x1:[v:int | true]
_x2:[v:int | v == s]
_53:[v:int list | emp v]
_54:[v:int list | ∃_x8, (hd _x8 _x2 ∧ tl _x8 _53 ∧ v == _x8)]
_x16:[v:int list | ∃_x16, (hd _x16 _x1 ∧ tl _x16 _54 ∧ v == _x16)] 
 ⊢ let (_12) = Nil in
let (_x2) = s in
let (_54) = Cons (_x2, _12) in let (_x1) = int_gen () in Cons (_x1, _54) : int list :
[v:int list | ∃_x16, (hd _x16 _x1 ∧ tl _x16 _54 ∧ v == _x16)]
" ]
  node7 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
_67:[v:int list | emp v]
_x17:[v:int list | ∃_x17, (hd _x17 _x6 ∧ tl _x17 _67 ∧ v == _x17)] 
 ⊢ let (_67) = Nil in let (_x2) = s in let (_x6) = subs _x2 in Cons (_x6, _67) : int list :
[v:int list | ∃_x17, (hd _x17 _x6 ∧ tl _x17 _67 ∧ v == _x17)]
" ]
  node8 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
_80:[v:int | true]
_81:[v:int list | emp v]
_82:[v:int list | ∃_x9, (hd _x9 _80 ∧ tl _x9 _81 ∧ v == _x9)]
_x18:[v:int list | ∃_x18, (hd _x18 _x6 ∧ tl _x18 _82 ∧ v == _x18)] 
 ⊢ let (_13) = Nil in
let (_x1) = int_gen () in
let (_82) = Cons (_x1, _13) in
let (_x2) = s in let (_x6) = subs _x2 in Cons (_x6, _82) : int list :
[v:int list | ∃_x18, (hd _x18 _x6 ∧ tl _x18 _82 ∧ v == _x18)]
" ]
  node9 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
_x2:[v:int | v == s]
_108:[v:int list | emp v]
_109:[v:int list | ∃_x8, (hd _x8 _x2 ∧ tl _x8 _108 ∧ v == _x8)]
_x19:[v:int list | ∃_x19, (hd _x19 _x6 ∧ tl _x19 _109 ∧ v == _x19)] 
 ⊢ let (_12) = Nil in
let (_x2) = s in
let (_109) = Cons (_x2, _12) in let (_x6) = subs _x2 in Cons (_x6, _109) : int list :
[v:int list | ∃_x19, (hd _x19 _x6 ∧ tl _x19 _109 ∧ v == _x19)]
" ]

  node0 [ shape = box, color = green ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node1
  node2 -> node7
  node3 -> node4
  node4 [ shape = box, color = red ]
  node5 [ shape = box, color = blue ]
  node5 -> node8
  node5 -> node6
  node5 -> node3
  node6 -> node4
  node6 -> node9
  node7 [ shape = box, color = red ]
  node8 -> node9
  node9 [ shape = box, color = red ]
}
Type: int
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
_x12:[v:int | v == (_x6 - 1)] 
 ⊢ let (_x2) = s in let (_x6) = subs _x2 in subs _x6 : int :
[v:int | v == (_x6 - 1)]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)] 
 ⊢ let (_x2) = s in subs _x2 : int :
[v:int | v == (_x2 - 1)]
" ]
  node2 [ label = "_x1:[v:int | true] 
 ⊢ int_gen () : int :
[v:int | true]
" ]
  node3 [ label = "_x2:[v:int | v == s] 
 ⊢ s : int :
[v:int | v == s]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node0
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
}
Path Specific Collection:
pathcond_1:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ ¬x_3 ∧ (∃x_4, x_4))]
New Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
_x12:[v:int | v == (_x6 - 1)]
_430:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ ¬x_3 ∧ (∃x_4, x_4))]
_x44:[v:int list | ∃_x44, (hd _x44 _x12 ∧ tl _x44 _430 ∧ v == _x44)] 
 ⊢ let (_430) = Nil in
let (_x2) = s in
let (_x6) = subs _x2 in let (_x12) = subs _x6 in Cons (_x12, _430) : int list :
[v:int list | ∃_x44, (hd _x44 _x12 ∧ tl _x44 _430 ∧ v == _x44)]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_x2:[v:int | v == s]
_459:[v:int | v == (_x2 - 1)]
pathcond_1:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ ¬x_3 ∧ (∃x_4, x_4))]
_460:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _459 ∧ (∃_x20, ((∃n, (len _x20 n ∧ n <= s_5)) ∧ v == _x20)))]
_x53:[v:int list | ∃_x53, (hd _x53 _x2 ∧ tl _x53 _460 ∧ v == _x53)] 
 ⊢ let (_x2) = s in
let (_x6) = subs _x2 in let (_460) = sized_list_gen _x6 in Cons (_x2, _460) : int list :
[v:int list | ∃_x53, (hd _x53 _x2 ∧ tl _x53 _460 ∧ v == _x53)]
" ]
  node2 [ label = "_x1:[v:int | true]
_x2:[v:int | v == s]
_461:[v:int | v == (_x2 - 1)]
pathcond_1:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ ¬x_3 ∧ (∃x_4, x_4))]
_462:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _461 ∧ (∃_x20, ((∃n, (len _x20 n ∧ n <= s_5)) ∧ v == _x20)))]
_x54:[v:int list | ∃_x54, (hd _x54 _x1 ∧ tl _x54 _462 ∧ v == _x54)] 
 ⊢ let (_x2) = s in
let (_x6) = subs _x2 in
let (_462) = sized_list_gen _x6 in let (_x1) = int_gen () in Cons (_x1, _462) : int list :
[v:int list | ∃_x54, (hd _x54 _x1 ∧ tl _x54 _462 ∧ v == _x54)]
" ]
  node3 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
_x2:[v:int | v == s]
_463:[v:int | v == (_x2 - 1)]
pathcond_1:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ ¬x_3 ∧ (∃x_4, x_4))]
_464:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _463 ∧ (∃_x20, ((∃n, (len _x20 n ∧ n <= s_5)) ∧ v == _x20)))]
_x55:[v:int list | ∃_x55, (hd _x55 _x6 ∧ tl _x55 _464 ∧ v == _x55)] 
 ⊢ let (_x2) = s in
let (_x6) = subs _x2 in let (_464) = sized_list_gen _x6 in Cons (_x6, _464) : int list :
[v:int list | ∃_x55, (hd _x55 _x6 ∧ tl _x55 _464 ∧ v == _x55)]
" ]
  node4 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
_x12:[v:int | v == (_x6 - 1)]
_x2:[v:int | v == s]
_465:[v:int | v == (_x2 - 1)]
pathcond_1:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ ¬x_3 ∧ (∃x_4, x_4))]
_466:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _465 ∧ (∃_x20, ((∃n, (len _x20 n ∧ n <= s_5)) ∧ v == _x20)))]
_x56:[v:int list | ∃_x56, (hd _x56 _x12 ∧ tl _x56 _466 ∧ v == _x56)] 
 ⊢ let (_x2) = s in
let (_x6) = subs _x2 in
let (_466) = sized_list_gen _x6 in let (_x12) = subs _x6 in Cons (_x12, _466) : int list :
[v:int list | ∃_x56, (hd _x56 _x12 ∧ tl _x56 _466 ∧ v == _x56)]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node4
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
  node4 -> node0
}
Old Blocks:
Type: int list
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int | v == s]
_x6:[v:int | v == (_x2 - 1)]
pathcond_1:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ ¬x_3 ∧ (∃x_4, x_4))]
_x20:[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x6 ∧ (∃_x20, ((∃n, (len _x20 n ∧ n <= s_5)) ∧ v == _x20)))] 
 ⊢ let (_x2) = s in let (_x6) = subs _x2 in sized_list_gen _x6 : int list :
[v:int list | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x6 ∧ (∃_x20, ((∃n, (len _x20 n ∧ n <= s_5)) ∧ v == _x20)))]
" ]

  node0 [ shape = box, color = green ]
}
pathcond_0:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ x_3)]
New Blocks:
Old Blocks:
