Path Specific Collection:
In Path:
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
Cost: 5
Type: Ty_int
_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x7:[v:int | v == (_x2 - 1)] 
 ⊢ _x7 as let (_x2) = s in subs _x2 : int :
[v:int | v == (_x2 - 1)]

Cost: 12
Type: (Ty_constructor(list(Ty_int)))
_3:[v:int | true]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_9:[v:int list | ∃_x9, (hd _x9 _x2 && tl _x9 _x0 && v == _x9)]
_x17:[v:int list | ∃_x17, (hd _x17 _3 && tl _x17 _9 && v == _x17)] 
 ⊢ _x17 as let (_x0) = Nil in
let (_x2) = s in
let (_9) = Cons (_x2, _x0) in let (_3) = int_gen () in Cons (_3, _9) : int list :
[v:int list | ∃_x17, (hd _x17 _3 && tl _x17 _9 && v == _x17)]

_3:[v:int | true]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_7:[v:int | true]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_8:[v:int list | ∃_x10, (hd _x10 _7 && tl _x10 _x0 && v == _x10)]
_x16:[v:int list | ∃_x16, (hd _x16 _3 && tl _x16 _8 && v == _x16)] 
 ⊢ _x16 as let (_x0) = Nil in
let (_3) = int_gen () in let (_8) = Cons (_3, _x0) in Cons (_3, _8) : int list :
[v:int list | ∃_x16, (hd _x16 _3 && tl _x16 _8 && v == _x16)]

_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_6:[v:int list | ∃_x9, (hd _x9 _x2 && tl _x9 _x0 && v == _x9)]
_x15:[v:int list | ∃_x15, (hd _x15 _x2 && tl _x15 _6 && v == _x15)] 
 ⊢ _x15 as let (_x0) = Nil in
let (_x2) = s in let (_6) = Cons (_x2, _x0) in Cons (_x2, _6) : int list :
[v:int list | ∃_x15, (hd _x15 _x2 && tl _x15 _6 && v == _x15)]

_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_4:[v:int | true]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_5:[v:int list | ∃_x10, (hd _x10 _4 && tl _x10 _x0 && v == _x10)]
_x14:[v:int list | ∃_x14, (hd _x14 _x2 && tl _x14 _5 && v == _x14)] 
 ⊢ _x14 as let (_x0) = Nil in
let (_3) = int_gen () in
let (_5) = Cons (_3, _x0) in let (_x2) = s in Cons (_x2, _5) : int list :
[v:int list | ∃_x14, (hd _x14 _x2 && tl _x14 _5 && v == _x14)]

Cost: 7
Type: (Ty_constructor(list(Ty_int)))
_3:[v:int | true]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x10:[v:int list | ∃_x10, (hd _x10 _3 && tl _x10 _x0 && v == _x10)] 
 ⊢ _x10 as let (_x0) = Nil in let (_3) = int_gen () in Cons (_3, _x0) : int list :
[v:int list | ∃_x10, (hd _x10 _3 && tl _x10 _x0 && v == _x10)]

_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x9:[v:int list | ∃_x9, (hd _x9 _x2 && tl _x9 _x0 && v == _x9)] 
 ⊢ _x9 as let (_x0) = Nil in let (_x2) = s in Cons (_x2, _x0) : int list :
[v:int list | ∃_x9, (hd _x9 _x2 && tl _x9 _x0 && v == _x9)]

Cost: 8
Type: (Ty_constructor(list(Ty_int)))
_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x7:[v:int | v == (_x2 - 1)]
_x11:[v:int list | ∃s_4, (0 <= s_4 && s_4 >= 0 && s_4 < s && s_4 == _x7 && (∃_x11, ((∃n, (len _x11 n && n <= s_4)) && v == _x11)))] 
 ⊢ _x11 as let (_x2) = s in let (_x7) = subs _x2 in sized_list_gen _x7 : int list :
[v:int list | ∃s_4, (0 <= s_4 && s_4 >= 0 && s_4 < s && s_4 == _x7 && (∃_x11, ((∃n, (len _x11 n && n <= s_4)) && v == _x11)))]

Cost: 2
Type: (Ty_constructor(list(Ty_int)))
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)] 
 ⊢ _x0 as Nil : int list :
[v:int list | emp v]

Cost: 11
Type: (Ty_constructor(list(Ty_int)))
_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x7:[v:int | v == (_x2 - 1)]
_x0:[v:int list | emp v]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x13:[v:int list | ∃_x13, (hd _x13 _x7 && tl _x13 _x0 && v == _x13)] 
 ⊢ _x13 as let (_x0) = Nil in let (_x2) = s in let (_x7) = subs _x2 in Cons (_x7, _x0) : int list :
[v:int list | ∃_x13, (hd _x13 _x7 && tl _x13 _x0 && v == _x13)]

Cost: 1
Type: Ty_int
_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)] 
 ⊢ _x2 as s : int :
[v:int | v == s]

_3:[v:int | true]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)] 
 ⊢ _3 as int_gen () : int :
[v:int | true]

Cost: 9
Type: Ty_int
_x2:[v:int | v == s]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) && (not x_2 <=> s > 0) && not x_2)]
_x7:[v:int | v == (_x2 - 1)]
_x12:[v:int | v == (_x7 - 1)] 
 ⊢ _x12 as let (_x2) = s in let (_x7) = subs _x2 in subs _x7 : int :
[v:int | v == (_x7 - 1)]

