General Collection:
New Blocks:
Old Blocks:
Type: int tree
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int tree | leaf v] 
 ⊢ Leaf  : int tree :
[v:int tree | leaf v]
" ]
  node1 [ label = "_x5:[v:int | v == s]
_12:[v:int tree | leaf v]
_13:[v:int tree | leaf v]
_x12:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _12 ∧ rch _x12 _13 ∧ v == _x12)] 
 ⊢ let (_13) = Leaf  in let (_12) = Leaf  in let (_x5) = s in Node _x5 _12 _13 : int tree :
[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _12 ∧ rch _x12 _13 ∧ v == _x12)]
" ]
  node2 [ label = "_x4:[v:int | true]
_14:[v:int tree | leaf v]
_15:[v:int tree | leaf v]
_x13:[v:int tree | ∃_x13, (root _x13 _x4 ∧ lch _x13 _14 ∧ rch _x13 _15 ∧ v == _x13)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in let (_x4) = int_gen () in Node _x4 _14 _15 : int tree :
[v:int tree | ∃_x13, (root _x13 _x4 ∧ lch _x13 _14 ∧ rch _x13 _15 ∧ v == _x13)]
" ]
  node3 [ label = "_x5:[v:int | v == s]
_45:[v:int tree | leaf v]
_46:[v:int | true]
_47:[v:int tree | leaf v]
_48:[v:int tree | leaf v]
_49:[v:int tree | ∃_x13, (root _x13 _46 ∧ lch _x13 _47 ∧ rch _x13 _48 ∧ v == _x13)]
_x18:[v:int tree | ∃_x18, (root _x18 _x5 ∧ lch _x18 _45 ∧ rch _x18 _49 ∧ v == _x18)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_49) = Node _x4 _14 _15 in
let (_45) = Leaf  in let (_x5) = s in Node _x5 _45 _49 : int tree :
[v:int tree | ∃_x18, (root _x18 _x5 ∧ lch _x18 _45 ∧ rch _x18 _49 ∧ v == _x18)]
" ]
  node4 [ label = "_x5:[v:int | v == s]
_50:[v:int tree | leaf v]
_x5:[v:int | v == s]
_51:[v:int tree | leaf v]
_52:[v:int tree | leaf v]
_53:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _51 ∧ rch _x12 _52 ∧ v == _x12)]
_x19:[v:int tree | ∃_x19, (root _x19 _x5 ∧ lch _x19 _50 ∧ rch _x19 _53 ∧ v == _x19)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_53) = Node _x5 _12 _13 in let (_50) = Leaf  in Node _x5 _50 _53 : int tree :
[v:int tree | ∃_x19, (root _x19 _x5 ∧ lch _x19 _50 ∧ rch _x19 _53 ∧ v == _x19)]
" ]
  node5 [ label = "_x4:[v:int | true]
_59:[v:int tree | leaf v]
_60:[v:int | true]
_61:[v:int tree | leaf v]
_62:[v:int tree | leaf v]
_63:[v:int tree | ∃_x13, (root _x13 _60 ∧ lch _x13 _61 ∧ rch _x13 _62 ∧ v == _x13)]
_x20:[v:int tree | ∃_x20, (root _x20 _x4 ∧ lch _x20 _59 ∧ rch _x20 _63 ∧ v == _x20)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_63) = Node _x4 _14 _15 in let (_59) = Leaf  in Node _x4 _59 _63 : int tree :
[v:int tree | ∃_x20, (root _x20 _x4 ∧ lch _x20 _59 ∧ rch _x20 _63 ∧ v == _x20)]
" ]
  node6 [ label = "_x4:[v:int | true]
_78:[v:int tree | leaf v]
_x5:[v:int | v == s]
_79:[v:int tree | leaf v]
_80:[v:int tree | leaf v]
_81:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _79 ∧ rch _x12 _80 ∧ v == _x12)]
_x21:[v:int tree | ∃_x21, (root _x21 _x4 ∧ lch _x21 _78 ∧ rch _x21 _81 ∧ v == _x21)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_81) = Node _x5 _12 _13 in
let (_78) = Leaf  in let (_x4) = int_gen () in Node _x4 _78 _81 : int tree :
[v:int tree | ∃_x21, (root _x21 _x4 ∧ lch _x21 _78 ∧ rch _x21 _81 ∧ v == _x21)]
" ]
  node7 [ label = "_x5:[v:int | v == s]
_100:[v:int | true]
_101:[v:int tree | leaf v]
_102:[v:int tree | leaf v]
_103:[v:int tree | ∃_x13, (root _x13 _100 ∧ lch _x13 _101 ∧ rch _x13 _102 ∧ v == _x13)]
_104:[v:int tree | leaf v]
_x22:[v:int tree | ∃_x22, (root _x22 _x5 ∧ lch _x22 _103 ∧ rch _x22 _104 ∧ v == _x22)] 
 ⊢ let (_104) = Leaf  in
let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_103) = Node _x4 _14 _15 in let (_x5) = s in Node _x5 _103 _104 : int tree :
[v:int tree | ∃_x22, (root _x22 _x5 ∧ lch _x22 _103 ∧ rch _x22 _104 ∧ v == _x22)]
" ]
  node8 [ label = "_x5:[v:int | v == s]
_x5:[v:int | v == s]
_129:[v:int tree | leaf v]
_130:[v:int tree | leaf v]
_131:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _129 ∧ rch _x12 _130 ∧ v == _x12)]
_132:[v:int tree | leaf v]
_x23:[v:int tree | ∃_x23, (root _x23 _x5 ∧ lch _x23 _131 ∧ rch _x23 _132 ∧ v == _x23)] 
 ⊢ let (_132) = Leaf  in
let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in let (_131) = Node _x5 _12 _13 in Node _x5 _131 _132 : int tree :
[v:int tree | ∃_x23, (root _x23 _x5 ∧ lch _x23 _131 ∧ rch _x23 _132 ∧ v == _x23)]
" ]
  node9 [ label = "_x4:[v:int | true]
_158:[v:int | true]
_159:[v:int tree | leaf v]
_160:[v:int tree | leaf v]
_161:[v:int tree | ∃_x13, (root _x13 _158 ∧ lch _x13 _159 ∧ rch _x13 _160 ∧ v == _x13)]
_162:[v:int tree | leaf v]
_x24:[v:int tree | ∃_x24, (root _x24 _x4 ∧ lch _x24 _161 ∧ rch _x24 _162 ∧ v == _x24)] 
 ⊢ let (_162) = Leaf  in
let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in let (_161) = Node _x4 _14 _15 in Node _x4 _161 _162 : int tree :
[v:int tree | ∃_x24, (root _x24 _x4 ∧ lch _x24 _161 ∧ rch _x24 _162 ∧ v == _x24)]
" ]
  node10 [ label = "_x4:[v:int | true]
_x5:[v:int | v == s]
_205:[v:int tree | leaf v]
_206:[v:int tree | leaf v]
_207:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _205 ∧ rch _x12 _206 ∧ v == _x12)]
_208:[v:int tree | leaf v]
_x25:[v:int tree | ∃_x25, (root _x25 _x4 ∧ lch _x25 _207 ∧ rch _x25 _208 ∧ v == _x25)] 
 ⊢ let (_208) = Leaf  in
let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_207) = Node _x5 _12 _13 in let (_x4) = int_gen () in Node _x4 _207 _208 : int tree :
[v:int tree | ∃_x25, (root _x25 _x4 ∧ lch _x25 _207 ∧ rch _x25 _208 ∧ v == _x25)]
" ]
  node11 [ label = "_x5:[v:int | v == s]
_251:[v:int | true]
_252:[v:int tree | leaf v]
_253:[v:int tree | leaf v]
_254:[v:int tree | ∃_x13, (root _x13 _251 ∧ lch _x13 _252 ∧ rch _x13 _253 ∧ v == _x13)]
_255:[v:int | true]
_256:[v:int tree | leaf v]
_257:[v:int tree | leaf v]
_258:[v:int tree | ∃_x13, (root _x13 _255 ∧ lch _x13 _256 ∧ rch _x13 _257 ∧ v == _x13)]
_x26:[v:int tree | ∃_x26, (root _x26 _x5 ∧ lch _x26 _254 ∧ rch _x26 _258 ∧ v == _x26)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_258) = Node _x4 _14 _15 in
let (_254) = Node _x4 _14 _15 in let (_x5) = s in Node _x5 _254 _258 : int tree :
[v:int tree | ∃_x26, (root _x26 _x5 ∧ lch _x26 _254 ∧ rch _x26 _258 ∧ v == _x26)]
" ]
  node12 [ label = "_x5:[v:int | v == s]
_331:[v:int | true]
_332:[v:int tree | leaf v]
_333:[v:int tree | leaf v]
_334:[v:int tree | ∃_x13, (root _x13 _331 ∧ lch _x13 _332 ∧ rch _x13 _333 ∧ v == _x13)]
_x5:[v:int | v == s]
_335:[v:int tree | leaf v]
_336:[v:int tree | leaf v]
_337:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _335 ∧ rch _x12 _336 ∧ v == _x12)]
_x27:[v:int tree | ∃_x27, (root _x27 _x5 ∧ lch _x27 _334 ∧ rch _x27 _337 ∧ v == _x27)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_337) = Node _x5 _12 _13 in
let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in let (_334) = Node _x4 _14 _15 in Node _x5 _334 _337 : int tree :
[v:int tree | ∃_x27, (root _x27 _x5 ∧ lch _x27 _334 ∧ rch _x27 _337 ∧ v == _x27)]
" ]
  node13 [ label = "_x5:[v:int | v == s]
_x5:[v:int | v == s]
_410:[v:int tree | leaf v]
_411:[v:int tree | leaf v]
_412:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _410 ∧ rch _x12 _411 ∧ v == _x12)]
_413:[v:int | true]
_414:[v:int tree | leaf v]
_415:[v:int tree | leaf v]
_416:[v:int tree | ∃_x13, (root _x13 _413 ∧ lch _x13 _414 ∧ rch _x13 _415 ∧ v == _x13)]
_x28:[v:int tree | ∃_x28, (root _x28 _x5 ∧ lch _x28 _412 ∧ rch _x28 _416 ∧ v == _x28)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_416) = Node _x4 _14 _15 in
let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in let (_412) = Node _x5 _12 _13 in Node _x5 _412 _416 : int tree :
[v:int tree | ∃_x28, (root _x28 _x5 ∧ lch _x28 _412 ∧ rch _x28 _416 ∧ v == _x28)]
" ]
  node14 [ label = "_x5:[v:int | v == s]
_x5:[v:int | v == s]
_497:[v:int tree | leaf v]
_498:[v:int tree | leaf v]
_499:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _497 ∧ rch _x12 _498 ∧ v == _x12)]
_x5:[v:int | v == s]
_500:[v:int tree | leaf v]
_501:[v:int tree | leaf v]
_502:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _500 ∧ rch _x12 _501 ∧ v == _x12)]
_x29:[v:int tree | ∃_x29, (root _x29 _x5 ∧ lch _x29 _499 ∧ rch _x29 _502 ∧ v == _x29)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_502) = Node _x5 _12 _13 in
let (_499) = Node _x5 _12 _13 in Node _x5 _499 _502 : int tree :
[v:int tree | ∃_x29, (root _x29 _x5 ∧ lch _x29 _499 ∧ rch _x29 _502 ∧ v == _x29)]
" ]
  node15 [ label = "_x4:[v:int | true]
_588:[v:int | true]
_589:[v:int tree | leaf v]
_590:[v:int tree | leaf v]
_591:[v:int tree | ∃_x13, (root _x13 _588 ∧ lch _x13 _589 ∧ rch _x13 _590 ∧ v == _x13)]
_592:[v:int | true]
_593:[v:int tree | leaf v]
_594:[v:int tree | leaf v]
_595:[v:int tree | ∃_x13, (root _x13 _592 ∧ lch _x13 _593 ∧ rch _x13 _594 ∧ v == _x13)]
_x30:[v:int tree | ∃_x30, (root _x30 _x4 ∧ lch _x30 _591 ∧ rch _x30 _595 ∧ v == _x30)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_595) = Node _x4 _14 _15 in
let (_591) = Node _x4 _14 _15 in Node _x4 _591 _595 : int tree :
[v:int tree | ∃_x30, (root _x30 _x4 ∧ lch _x30 _591 ∧ rch _x30 _595 ∧ v == _x30)]
" ]
  node16 [ label = "_x4:[v:int | true]
_724:[v:int | true]
_725:[v:int tree | leaf v]
_726:[v:int tree | leaf v]
_727:[v:int tree | ∃_x13, (root _x13 _724 ∧ lch _x13 _725 ∧ rch _x13 _726 ∧ v == _x13)]
_x5:[v:int | v == s]
_728:[v:int tree | leaf v]
_729:[v:int tree | leaf v]
_730:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _728 ∧ rch _x12 _729 ∧ v == _x12)]
_x31:[v:int tree | ∃_x31, (root _x31 _x4 ∧ lch _x31 _727 ∧ rch _x31 _730 ∧ v == _x31)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_730) = Node _x5 _12 _13 in
let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in let (_727) = Node _x4 _14 _15 in Node _x4 _727 _730 : int tree :
[v:int tree | ∃_x31, (root _x31 _x4 ∧ lch _x31 _727 ∧ rch _x31 _730 ∧ v == _x31)]
" ]
  node17 [ label = "_x4:[v:int | true]
_x5:[v:int | v == s]
_848:[v:int tree | leaf v]
_849:[v:int tree | leaf v]
_850:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _848 ∧ rch _x12 _849 ∧ v == _x12)]
_851:[v:int | true]
_852:[v:int tree | leaf v]
_853:[v:int tree | leaf v]
_854:[v:int tree | ∃_x13, (root _x13 _851 ∧ lch _x13 _852 ∧ rch _x13 _853 ∧ v == _x13)]
_x32:[v:int tree | ∃_x32, (root _x32 _x4 ∧ lch _x32 _850 ∧ rch _x32 _854 ∧ v == _x32)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_854) = Node _x4 _14 _15 in
let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in let (_850) = Node _x5 _12 _13 in Node _x4 _850 _854 : int tree :
[v:int tree | ∃_x32, (root _x32 _x4 ∧ lch _x32 _850 ∧ rch _x32 _854 ∧ v == _x32)]
" ]
  node18 [ label = "_x4:[v:int | true]
_x5:[v:int | v == s]
_981:[v:int tree | leaf v]
_982:[v:int tree | leaf v]
_983:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _981 ∧ rch _x12 _982 ∧ v == _x12)]
_x5:[v:int | v == s]
_984:[v:int tree | leaf v]
_985:[v:int tree | leaf v]
_986:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _984 ∧ rch _x12 _985 ∧ v == _x12)]
_x33:[v:int tree | ∃_x33, (root _x33 _x4 ∧ lch _x33 _983 ∧ rch _x33 _986 ∧ v == _x33)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_986) = Node _x5 _12 _13 in
let (_983) = Node _x5 _12 _13 in let (_x4) = int_gen () in Node _x4 _983 _986 : int tree :
[v:int tree | ∃_x33, (root _x33 _x4 ∧ lch _x33 _983 ∧ rch _x33 _986 ∧ v == _x33)]
" ]
  node19 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_1116:[v:int tree | leaf v]
_1117:[v:int tree | leaf v]
_x34:[v:int tree | ∃_x34, (root _x34 _x8 ∧ lch _x34 _1116 ∧ rch _x34 _1117 ∧ v == _x34)] 
 ⊢ let (_1117) = Leaf  in
let (_1116) = Leaf  in
let (_x5) = s in let (_x8) = subs _x5 in Node _x8 _1116 _1117 : int tree :
[v:int tree | ∃_x34, (root _x34 _x8 ∧ lch _x34 _1116 ∧ rch _x34 _1117 ∧ v == _x34)]
" ]
  node20 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_1182:[v:int tree | leaf v]
_1183:[v:int | true]
_1184:[v:int tree | leaf v]
_1185:[v:int tree | leaf v]
_1186:[v:int tree | ∃_x13, (root _x13 _1183 ∧ lch _x13 _1184 ∧ rch _x13 _1185 ∧ v == _x13)]
_x35:[v:int tree | ∃_x35, (root _x35 _x8 ∧ lch _x35 _1182 ∧ rch _x35 _1186 ∧ v == _x35)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_1186) = Node _x4 _14 _15 in
let (_1182) = Leaf  in
let (_x5) = s in let (_x8) = subs _x5 in Node _x8 _1182 _1186 : int tree :
[v:int tree | ∃_x35, (root _x35 _x8 ∧ lch _x35 _1182 ∧ rch _x35 _1186 ∧ v == _x35)]
" ]
  node21 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_1306:[v:int tree | leaf v]
_x5:[v:int | v == s]
_1307:[v:int tree | leaf v]
_1308:[v:int tree | leaf v]
_1309:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _1307 ∧ rch _x12 _1308 ∧ v == _x12)]
_x36:[v:int tree | ∃_x36, (root _x36 _x8 ∧ lch _x36 _1306 ∧ rch _x36 _1309 ∧ v == _x36)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_1309) = Node _x5 _12 _13 in
let (_1306) = Leaf  in let (_x8) = subs _x5 in Node _x8 _1306 _1309 : int tree :
[v:int tree | ∃_x36, (root _x36 _x8 ∧ lch _x36 _1306 ∧ rch _x36 _1309 ∧ v == _x36)]
" ]
  node22 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_1425:[v:int | true]
_1426:[v:int tree | leaf v]
_1427:[v:int tree | leaf v]
_1428:[v:int tree | ∃_x13, (root _x13 _1425 ∧ lch _x13 _1426 ∧ rch _x13 _1427 ∧ v == _x13)]
_1429:[v:int tree | leaf v]
_x37:[v:int tree | ∃_x37, (root _x37 _x8 ∧ lch _x37 _1428 ∧ rch _x37 _1429 ∧ v == _x37)] 
 ⊢ let (_1429) = Leaf  in
let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_1428) = Node _x4 _14 _15 in
let (_x5) = s in let (_x8) = subs _x5 in Node _x8 _1428 _1429 : int tree :
[v:int tree | ∃_x37, (root _x37 _x8 ∧ lch _x37 _1428 ∧ rch _x37 _1429 ∧ v == _x37)]
" ]
  node23 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x5:[v:int | v == s]
_1563:[v:int tree | leaf v]
_1564:[v:int tree | leaf v]
_1565:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _1563 ∧ rch _x12 _1564 ∧ v == _x12)]
_1566:[v:int tree | leaf v]
_x38:[v:int tree | ∃_x38, (root _x38 _x8 ∧ lch _x38 _1565 ∧ rch _x38 _1566 ∧ v == _x38)] 
 ⊢ let (_1566) = Leaf  in
let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_1565) = Node _x5 _12 _13 in
let (_x8) = subs _x5 in Node _x8 _1565 _1566 : int tree :
[v:int tree | ∃_x38, (root _x38 _x8 ∧ lch _x38 _1565 ∧ rch _x38 _1566 ∧ v == _x38)]
" ]
  node24 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_1694:[v:int | true]
_1695:[v:int tree | leaf v]
_1696:[v:int tree | leaf v]
_1697:[v:int tree | ∃_x13, (root _x13 _1694 ∧ lch _x13 _1695 ∧ rch _x13 _1696 ∧ v == _x13)]
_1698:[v:int | true]
_1699:[v:int tree | leaf v]
_1700:[v:int tree | leaf v]
_1701:[v:int tree | ∃_x13, (root _x13 _1698 ∧ lch _x13 _1699 ∧ rch _x13 _1700 ∧ v == _x13)]
_x39:[v:int tree | ∃_x39, (root _x39 _x8 ∧ lch _x39 _1697 ∧ rch _x39 _1701 ∧ v == _x39)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_1701) = Node _x4 _14 _15 in
let (_1697) = Node _x4 _14 _15 in
let (_x5) = s in let (_x8) = subs _x5 in Node _x8 _1697 _1701 : int tree :
[v:int tree | ∃_x39, (root _x39 _x8 ∧ lch _x39 _1697 ∧ rch _x39 _1701 ∧ v == _x39)]
" ]
  node25 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_1912:[v:int | true]
_1913:[v:int tree | leaf v]
_1914:[v:int tree | leaf v]
_1915:[v:int tree | ∃_x13, (root _x13 _1912 ∧ lch _x13 _1913 ∧ rch _x13 _1914 ∧ v == _x13)]
_x5:[v:int | v == s]
_1916:[v:int tree | leaf v]
_1917:[v:int tree | leaf v]
_1918:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _1916 ∧ rch _x12 _1917 ∧ v == _x12)]
_x40:[v:int tree | ∃_x40, (root _x40 _x8 ∧ lch _x40 _1915 ∧ rch _x40 _1918 ∧ v == _x40)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_1918) = Node _x5 _12 _13 in
let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_1915) = Node _x4 _14 _15 in
let (_x8) = subs _x5 in Node _x8 _1915 _1918 : int tree :
[v:int tree | ∃_x40, (root _x40 _x8 ∧ lch _x40 _1915 ∧ rch _x40 _1918 ∧ v == _x40)]
" ]
  node26 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x5:[v:int | v == s]
_2127:[v:int tree | leaf v]
_2128:[v:int tree | leaf v]
_2129:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _2127 ∧ rch _x12 _2128 ∧ v == _x12)]
_2130:[v:int | true]
_2131:[v:int tree | leaf v]
_2132:[v:int tree | leaf v]
_2133:[v:int tree | ∃_x13, (root _x13 _2130 ∧ lch _x13 _2131 ∧ rch _x13 _2132 ∧ v == _x13)]
_x41:[v:int tree | ∃_x41, (root _x41 _x8 ∧ lch _x41 _2129 ∧ rch _x41 _2133 ∧ v == _x41)] 
 ⊢ let (_15) = Leaf  in
let (_14) = Leaf  in
let (_x4) = int_gen () in
let (_2133) = Node _x4 _14 _15 in
let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_2129) = Node _x5 _12 _13 in
let (_x8) = subs _x5 in Node _x8 _2129 _2133 : int tree :
[v:int tree | ∃_x41, (root _x41 _x8 ∧ lch _x41 _2129 ∧ rch _x41 _2133 ∧ v == _x41)]
" ]
  node27 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x5:[v:int | v == s]
_2351:[v:int tree | leaf v]
_2352:[v:int tree | leaf v]
_2353:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _2351 ∧ rch _x12 _2352 ∧ v == _x12)]
_x5:[v:int | v == s]
_2354:[v:int tree | leaf v]
_2355:[v:int tree | leaf v]
_2356:[v:int tree | ∃_x12, (root _x12 _x5 ∧ lch _x12 _2354 ∧ rch _x12 _2355 ∧ v == _x12)]
_x42:[v:int tree | ∃_x42, (root _x42 _x8 ∧ lch _x42 _2353 ∧ rch _x42 _2356 ∧ v == _x42)] 
 ⊢ let (_13) = Leaf  in
let (_12) = Leaf  in
let (_x5) = s in
let (_2356) = Node _x5 _12 _13 in
let (_2353) = Node _x5 _12 _13 in
let (_x8) = subs _x5 in Node _x8 _2353 _2356 : int tree :
[v:int tree | ∃_x42, (root _x42 _x8 ∧ lch _x42 _2353 ∧ rch _x42 _2356 ∧ v == _x42)]
" ]

  node0 [ shape = box, color = green ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node1
  node2 -> node19
  node3 -> node4
  node4 [ shape = box, color = red ]
  node5 [ shape = box, color = blue ]
  node5 -> node20
  node5 -> node6
  node5 -> node3
  node6 [ shape = box, color = red ]
  node7 -> node8
  node8 [ shape = box, color = red ]
  node9 [ shape = box, color = blue ]
  node9 -> node10
  node9 -> node22
  node9 -> node7
  node10 [ shape = box, color = red ]
  node11 -> node12
  node11 -> node13
  node12 -> node14
  node13 [ shape = box, color = red ]
  node14 [ shape = box, color = red ]
  node15 [ shape = box, color = blue ]
  node15 -> node16
  node15 -> node24
  node15 -> node18
  node15 -> node17
  node15 -> node11
  node16 -> node12
  node16 -> node18
  node16 -> node25
  node16 -> node27
  node17 [ shape = box, color = red ]
  node18 [ shape = box, color = red ]
  node19 [ shape = box, color = red ]
  node20 -> node21
  node21 [ shape = box, color = red ]
  node22 -> node23
  node23 [ shape = box, color = red ]
  node24 -> node26
  node24 -> node25
  node25 -> node27
  node26 [ shape = box, color = red ]
  node27 [ shape = box, color = red ]
}
Type: bool
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x17:[v:bool | ∃_x17, ((_x17 <=> _x8 == 0) ∧ (¬_x17 <=> _x8 > 0) ∧ v == _x17)] 
 ⊢ let (_x5) = s in let (_x8) = subs _x5 in sizecheck _x8 : bool :
[v:bool | ∃_x17, ((_x17 <=> _x8 == 0) ∧ (¬_x17 <=> _x8 > 0) ∧ v == _x17)]
" ]
  node1 [ label = "_x5:[v:int | v == s]
_x10:[v:bool | ∃_x10, ((_x10 <=> _x5 == 0) ∧ (¬_x10 <=> _x5 > 0) ∧ v == _x10)] 
 ⊢ let (_x5) = s in sizecheck _x5 : bool :
[v:bool | ∃_x10, ((_x10 <=> _x5 == 0) ∧ (¬_x10 <=> _x5 > 0) ∧ v == _x10)]
" ]
  node2 [ label = "_x3:[v:bool | true] 
 ⊢ bool_gen () : bool :
[v:bool | true]
" ]
  node3 [ label = "_x1:[v:bool | ¬v] 
 ⊢ False  : bool :
[v:bool | ¬v]
" ]
  node4 [ label = "_x0:[v:bool | v] 
 ⊢ True  : bool :
[v:bool | v]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node0
  node2 -> node4
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
  node4 [ shape = box, color = red ]
}
Type: int
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
_x16:[v:int | v == (_x8 - 1)] 
 ⊢ let (_x5) = s in let (_x8) = subs _x5 in subs _x8 : int :
[v:int | v == (_x8 - 1)]
" ]
  node1 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)] 
 ⊢ let (_x5) = s in subs _x5 : int :
[v:int | v == (_x5 - 1)]
" ]
  node2 [ label = "_x4:[v:int | true] 
 ⊢ int_gen () : int :
[v:int | true]
" ]
  node3 [ label = "_x5:[v:int | v == s] 
 ⊢ s : int :
[v:int | v == s]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node0
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
}
Path Specific Collection:
pathcond_0:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ x_2)]
New Blocks:
Old Blocks:
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
New Blocks:
Type: int tree
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x4:[v:int | true]
_x5:[v:int | v == s]
_48094:[v:int | v == (_x5 - 1)]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_48095:[v:int tree | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _48094 ∧ (∃_x43, (depth _x43 s_5 ∧ complete _x43 ∧ v == _x43)))]
_x5:[v:int | v == s]
_48096:[v:int | v == (_x5 - 1)]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_48097:[v:int tree | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _48096 ∧ (∃_x43, (depth _x43 s_5 ∧ complete _x43 ∧ v == _x43)))]
_x3173:[v:int tree | ∃_x3173, (root _x3173 _x4 ∧ lch _x3173 _48095 ∧ rch _x3173 _48097 ∧ v == _x3173)] 
 ⊢ let (_x5) = s in
let (_x8) = subs _x5 in
let (_48097) = complete_tree_gen _x8 in
let (_48095) = complete_tree_gen _x8 in
let (_x4) = int_gen () in Node _x4 _48095 _48097 : int tree :
[v:int tree | ∃_x3173, (root _x3173 _x4 ∧ lch _x3173 _48095 ∧ rch _x3173 _48097 ∧ v == _x3173)]
" ]

  node0 [ shape = box, color = green ]
}
Old Blocks:
Type: int tree
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x5:[v:int | v == s]
_x8:[v:int | v == (_x5 - 1)]
pathcond_1:[v:unit | ∃x_2, ((x_2 <=> s == 0) ∧ (¬x_2 <=> s > 0) ∧ ¬x_2)]
_x43:[v:int tree | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x8 ∧ (∃_x43, (depth _x43 s_5 ∧ complete _x43 ∧ v == _x43)))] 
 ⊢ let (_x5) = s in let (_x8) = subs _x5 in complete_tree_gen _x8 : int tree :
[v:int tree | ∃s_5, (0 <= s_5 ∧ s_5 >= 0 ∧ s_5 < s ∧ s_5 == _x8 ∧ (∃_x43, (depth _x43 s_5 ∧ complete _x43 ∧ v == _x43)))]
" ]

  node0 [ shape = box, color = green ]
}
