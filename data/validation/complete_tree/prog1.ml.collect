General Collection:
New Blocks:
Old Blocks:
Type: int tree
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x0:[v:int tree | leaf v] 
 ⊢ Leaf : int tree :
[v:int tree | leaf v]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_8:[v:int tree | leaf v]
_9:[v:int tree | leaf v]
_x7:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _8 ∧ rch _x7 _9 ∧ v == _x7)] 
 ⊢ let (_9) = Leaf in let (_8) = Leaf in let (_x2) = s in Node (_x2, _8, _9) : int tree :
[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _8 ∧ rch _x7 _9 ∧ v == _x7)]
" ]
  node2 [ label = "_x1:[v:int | true]
_10:[v:int tree | leaf v]
_11:[v:int tree | leaf v]
_x8:[v:int tree | ∃_x8, (root _x8 _x1 ∧ lch _x8 _10 ∧ rch _x8 _11 ∧ v == _x8)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in let (_x1) = int_gen () in Node (_x1, _10, _11) : int tree :
[v:int tree | ∃_x8, (root _x8 _x1 ∧ lch _x8 _10 ∧ rch _x8 _11 ∧ v == _x8)]
" ]
  node3 [ label = "_x2:[v:int | v == s]
_31:[v:int tree | leaf v]
_32:[v:int | true]
_33:[v:int tree | leaf v]
_34:[v:int tree | leaf v]
_35:[v:int tree | ∃_x8, (root _x8 _32 ∧ lch _x8 _33 ∧ rch _x8 _34 ∧ v == _x8)]
_x12:[v:int tree | ∃_x12, (root _x12 _x2 ∧ lch _x12 _31 ∧ rch _x12 _35 ∧ v == _x12)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_35) = Node (_x1, _10, _11) in
let (_31) = Leaf in let (_x2) = s in Node (_x2, _31, _35) : int tree :
[v:int tree | ∃_x12, (root _x12 _x2 ∧ lch _x12 _31 ∧ rch _x12 _35 ∧ v == _x12)]
" ]
  node4 [ label = "_x2:[v:int | v == s]
_36:[v:int tree | leaf v]
_x2:[v:int | v == s]
_37:[v:int tree | leaf v]
_38:[v:int tree | leaf v]
_39:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _37 ∧ rch _x7 _38 ∧ v == _x7)]
_x13:[v:int tree | ∃_x13, (root _x13 _x2 ∧ lch _x13 _36 ∧ rch _x13 _39 ∧ v == _x13)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_39) = Node (_x2, _8, _9) in let (_36) = Leaf in Node (_x2, _36, _39) : int tree :
[v:int tree | ∃_x13, (root _x13 _x2 ∧ lch _x13 _36 ∧ rch _x13 _39 ∧ v == _x13)]
" ]
  node5 [ label = "_x1:[v:int | true]
_45:[v:int tree | leaf v]
_46:[v:int | true]
_47:[v:int tree | leaf v]
_48:[v:int tree | leaf v]
_49:[v:int tree | ∃_x8, (root _x8 _46 ∧ lch _x8 _47 ∧ rch _x8 _48 ∧ v == _x8)]
_x14:[v:int tree | ∃_x14, (root _x14 _x1 ∧ lch _x14 _45 ∧ rch _x14 _49 ∧ v == _x14)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_49) = Node (_x1, _10, _11) in let (_45) = Leaf in Node (_x1, _45, _49) : int tree :
[v:int tree | ∃_x14, (root _x14 _x1 ∧ lch _x14 _45 ∧ rch _x14 _49 ∧ v == _x14)]
" ]
  node6 [ label = "_x1:[v:int | true]
_64:[v:int tree | leaf v]
_x2:[v:int | v == s]
_65:[v:int tree | leaf v]
_66:[v:int tree | leaf v]
_67:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _65 ∧ rch _x7 _66 ∧ v == _x7)]
_x15:[v:int tree | ∃_x15, (root _x15 _x1 ∧ lch _x15 _64 ∧ rch _x15 _67 ∧ v == _x15)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_67) = Node (_x2, _8, _9) in
let (_64) = Leaf in let (_x1) = int_gen () in Node (_x1, _64, _67) : int tree :
[v:int tree | ∃_x15, (root _x15 _x1 ∧ lch _x15 _64 ∧ rch _x15 _67 ∧ v == _x15)]
" ]
  node7 [ label = "_x2:[v:int | v == s]
_86:[v:int | true]
_87:[v:int tree | leaf v]
_88:[v:int tree | leaf v]
_89:[v:int tree | ∃_x8, (root _x8 _86 ∧ lch _x8 _87 ∧ rch _x8 _88 ∧ v == _x8)]
_90:[v:int tree | leaf v]
_x16:[v:int tree | ∃_x16, (root _x16 _x2 ∧ lch _x16 _89 ∧ rch _x16 _90 ∧ v == _x16)] 
 ⊢ let (_90) = Leaf in
let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_89) = Node (_x1, _10, _11) in let (_x2) = s in Node (_x2, _89, _90) : int tree :
[v:int tree | ∃_x16, (root _x16 _x2 ∧ lch _x16 _89 ∧ rch _x16 _90 ∧ v == _x16)]
" ]
  node8 [ label = "_x2:[v:int | v == s]
_x2:[v:int | v == s]
_115:[v:int tree | leaf v]
_116:[v:int tree | leaf v]
_117:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _115 ∧ rch _x7 _116 ∧ v == _x7)]
_118:[v:int tree | leaf v]
_x17:[v:int tree | ∃_x17, (root _x17 _x2 ∧ lch _x17 _117 ∧ rch _x17 _118 ∧ v == _x17)] 
 ⊢ let (_118) = Leaf in
let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in let (_117) = Node (_x2, _8, _9) in Node (_x2, _117, _118) : int tree :
[v:int tree | ∃_x17, (root _x17 _x2 ∧ lch _x17 _117 ∧ rch _x17 _118 ∧ v == _x17)]
" ]
  node9 [ label = "_x1:[v:int | true]
_144:[v:int | true]
_145:[v:int tree | leaf v]
_146:[v:int tree | leaf v]
_147:[v:int tree | ∃_x8, (root _x8 _144 ∧ lch _x8 _145 ∧ rch _x8 _146 ∧ v == _x8)]
_148:[v:int tree | leaf v]
_x18:[v:int tree | ∃_x18, (root _x18 _x1 ∧ lch _x18 _147 ∧ rch _x18 _148 ∧ v == _x18)] 
 ⊢ let (_148) = Leaf in
let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_147) = Node (_x1, _10, _11) in Node (_x1, _147, _148) : int tree :
[v:int tree | ∃_x18, (root _x18 _x1 ∧ lch _x18 _147 ∧ rch _x18 _148 ∧ v == _x18)]
" ]
  node10 [ label = "_x1:[v:int | true]
_x2:[v:int | v == s]
_196:[v:int tree | leaf v]
_197:[v:int tree | leaf v]
_198:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _196 ∧ rch _x7 _197 ∧ v == _x7)]
_199:[v:int tree | leaf v]
_x19:[v:int tree | ∃_x19, (root _x19 _x1 ∧ lch _x19 _198 ∧ rch _x19 _199 ∧ v == _x19)] 
 ⊢ let (_199) = Leaf in
let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_198) = Node (_x2, _8, _9) in
let (_x1) = int_gen () in Node (_x1, _198, _199) : int tree :
[v:int tree | ∃_x19, (root _x19 _x1 ∧ lch _x19 _198 ∧ rch _x19 _199 ∧ v == _x19)]
" ]
  node11 [ label = "_x2:[v:int | v == s]
_242:[v:int | true]
_243:[v:int tree | leaf v]
_244:[v:int tree | leaf v]
_245:[v:int tree | ∃_x8, (root _x8 _242 ∧ lch _x8 _243 ∧ rch _x8 _244 ∧ v == _x8)]
_246:[v:int | true]
_247:[v:int tree | leaf v]
_248:[v:int tree | leaf v]
_249:[v:int tree | ∃_x8, (root _x8 _246 ∧ lch _x8 _247 ∧ rch _x8 _248 ∧ v == _x8)]
_x20:[v:int tree | ∃_x20, (root _x20 _x2 ∧ lch _x20 _245 ∧ rch _x20 _249 ∧ v == _x20)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_249) = Node (_x1, _10, _11) in
let (_245) = Node (_x1, _10, _11) in let (_x2) = s in Node (_x2, _245, _249) : int tree :
[v:int tree | ∃_x20, (root _x20 _x2 ∧ lch _x20 _245 ∧ rch _x20 _249 ∧ v == _x20)]
" ]
  node12 [ label = "_x2:[v:int | v == s]
_322:[v:int | true]
_323:[v:int tree | leaf v]
_324:[v:int tree | leaf v]
_325:[v:int tree | ∃_x8, (root _x8 _322 ∧ lch _x8 _323 ∧ rch _x8 _324 ∧ v == _x8)]
_x2:[v:int | v == s]
_326:[v:int tree | leaf v]
_327:[v:int tree | leaf v]
_328:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _326 ∧ rch _x7 _327 ∧ v == _x7)]
_x21:[v:int tree | ∃_x21, (root _x21 _x2 ∧ lch _x21 _325 ∧ rch _x21 _328 ∧ v == _x21)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_328) = Node (_x2, _8, _9) in
let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_325) = Node (_x1, _10, _11) in Node (_x2, _325, _328) : int tree :
[v:int tree | ∃_x21, (root _x21 _x2 ∧ lch _x21 _325 ∧ rch _x21 _328 ∧ v == _x21)]
" ]
  node13 [ label = "_x2:[v:int | v == s]
_x2:[v:int | v == s]
_401:[v:int tree | leaf v]
_402:[v:int tree | leaf v]
_403:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _401 ∧ rch _x7 _402 ∧ v == _x7)]
_404:[v:int | true]
_405:[v:int tree | leaf v]
_406:[v:int tree | leaf v]
_407:[v:int tree | ∃_x8, (root _x8 _404 ∧ lch _x8 _405 ∧ rch _x8 _406 ∧ v == _x8)]
_x22:[v:int tree | ∃_x22, (root _x22 _x2 ∧ lch _x22 _403 ∧ rch _x22 _407 ∧ v == _x22)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_407) = Node (_x1, _10, _11) in
let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in let (_403) = Node (_x2, _8, _9) in Node (_x2, _403, _407) : int tree :
[v:int tree | ∃_x22, (root _x22 _x2 ∧ lch _x22 _403 ∧ rch _x22 _407 ∧ v == _x22)]
" ]
  node14 [ label = "_x2:[v:int | v == s]
_x2:[v:int | v == s]
_488:[v:int tree | leaf v]
_489:[v:int tree | leaf v]
_490:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _488 ∧ rch _x7 _489 ∧ v == _x7)]
_x2:[v:int | v == s]
_491:[v:int tree | leaf v]
_492:[v:int tree | leaf v]
_493:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _491 ∧ rch _x7 _492 ∧ v == _x7)]
_x23:[v:int tree | ∃_x23, (root _x23 _x2 ∧ lch _x23 _490 ∧ rch _x23 _493 ∧ v == _x23)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_493) = Node (_x2, _8, _9) in
let (_490) = Node (_x2, _8, _9) in Node (_x2, _490, _493) : int tree :
[v:int tree | ∃_x23, (root _x23 _x2 ∧ lch _x23 _490 ∧ rch _x23 _493 ∧ v == _x23)]
" ]
  node15 [ label = "_x1:[v:int | true]
_579:[v:int | true]
_580:[v:int tree | leaf v]
_581:[v:int tree | leaf v]
_582:[v:int tree | ∃_x8, (root _x8 _579 ∧ lch _x8 _580 ∧ rch _x8 _581 ∧ v == _x8)]
_583:[v:int | true]
_584:[v:int tree | leaf v]
_585:[v:int tree | leaf v]
_586:[v:int tree | ∃_x8, (root _x8 _583 ∧ lch _x8 _584 ∧ rch _x8 _585 ∧ v == _x8)]
_x24:[v:int tree | ∃_x24, (root _x24 _x1 ∧ lch _x24 _582 ∧ rch _x24 _586 ∧ v == _x24)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_586) = Node (_x1, _10, _11) in
let (_582) = Node (_x1, _10, _11) in Node (_x1, _582, _586) : int tree :
[v:int tree | ∃_x24, (root _x24 _x1 ∧ lch _x24 _582 ∧ rch _x24 _586 ∧ v == _x24)]
" ]
  node16 [ label = "_x1:[v:int | true]
_715:[v:int | true]
_716:[v:int tree | leaf v]
_717:[v:int tree | leaf v]
_718:[v:int tree | ∃_x8, (root _x8 _715 ∧ lch _x8 _716 ∧ rch _x8 _717 ∧ v == _x8)]
_x2:[v:int | v == s]
_719:[v:int tree | leaf v]
_720:[v:int tree | leaf v]
_721:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _719 ∧ rch _x7 _720 ∧ v == _x7)]
_x25:[v:int tree | ∃_x25, (root _x25 _x1 ∧ lch _x25 _718 ∧ rch _x25 _721 ∧ v == _x25)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_721) = Node (_x2, _8, _9) in
let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_718) = Node (_x1, _10, _11) in Node (_x1, _718, _721) : int tree :
[v:int tree | ∃_x25, (root _x25 _x1 ∧ lch _x25 _718 ∧ rch _x25 _721 ∧ v == _x25)]
" ]
  node17 [ label = "_x1:[v:int | true]
_x2:[v:int | v == s]
_839:[v:int tree | leaf v]
_840:[v:int tree | leaf v]
_841:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _839 ∧ rch _x7 _840 ∧ v == _x7)]
_842:[v:int | true]
_843:[v:int tree | leaf v]
_844:[v:int tree | leaf v]
_845:[v:int tree | ∃_x8, (root _x8 _842 ∧ lch _x8 _843 ∧ rch _x8 _844 ∧ v == _x8)]
_x26:[v:int tree | ∃_x26, (root _x26 _x1 ∧ lch _x26 _841 ∧ rch _x26 _845 ∧ v == _x26)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_845) = Node (_x1, _10, _11) in
let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in let (_841) = Node (_x2, _8, _9) in Node (_x1, _841, _845) : int tree :
[v:int tree | ∃_x26, (root _x26 _x1 ∧ lch _x26 _841 ∧ rch _x26 _845 ∧ v == _x26)]
" ]
  node18 [ label = "_x1:[v:int | true]
_x2:[v:int | v == s]
_972:[v:int tree | leaf v]
_973:[v:int tree | leaf v]
_974:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _972 ∧ rch _x7 _973 ∧ v == _x7)]
_x2:[v:int | v == s]
_975:[v:int tree | leaf v]
_976:[v:int tree | leaf v]
_977:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _975 ∧ rch _x7 _976 ∧ v == _x7)]
_x27:[v:int tree | ∃_x27, (root _x27 _x1 ∧ lch _x27 _974 ∧ rch _x27 _977 ∧ v == _x27)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_977) = Node (_x2, _8, _9) in
let (_974) = Node (_x2, _8, _9) in
let (_x1) = int_gen () in Node (_x1, _974, _977) : int tree :
[v:int tree | ∃_x27, (root _x27 _x1 ∧ lch _x27 _974 ∧ rch _x27 _977 ∧ v == _x27)]
" ]
  node19 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_1107:[v:int tree | leaf v]
_1108:[v:int tree | leaf v]
_x28:[v:int tree | ∃_x28, (root _x28 _x5 ∧ lch _x28 _1107 ∧ rch _x28 _1108 ∧ v == _x28)] 
 ⊢ let (_1108) = Leaf in
let (_1107) = Leaf in
let (_x2) = s in let (_x5) = subs _x2 in Node (_x5, _1107, _1108) : int tree :
[v:int tree | ∃_x28, (root _x28 _x5 ∧ lch _x28 _1107 ∧ rch _x28 _1108 ∧ v == _x28)]
" ]
  node20 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_1173:[v:int tree | leaf v]
_1174:[v:int | true]
_1175:[v:int tree | leaf v]
_1176:[v:int tree | leaf v]
_1177:[v:int tree | ∃_x8, (root _x8 _1174 ∧ lch _x8 _1175 ∧ rch _x8 _1176 ∧ v == _x8)]
_x29:[v:int tree | ∃_x29, (root _x29 _x5 ∧ lch _x29 _1173 ∧ rch _x29 _1177 ∧ v == _x29)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_1177) = Node (_x1, _10, _11) in
let (_1173) = Leaf in
let (_x2) = s in let (_x5) = subs _x2 in Node (_x5, _1173, _1177) : int tree :
[v:int tree | ∃_x29, (root _x29 _x5 ∧ lch _x29 _1173 ∧ rch _x29 _1177 ∧ v == _x29)]
" ]
  node21 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_1297:[v:int tree | leaf v]
_x2:[v:int | v == s]
_1298:[v:int tree | leaf v]
_1299:[v:int tree | leaf v]
_1300:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _1298 ∧ rch _x7 _1299 ∧ v == _x7)]
_x30:[v:int tree | ∃_x30, (root _x30 _x5 ∧ lch _x30 _1297 ∧ rch _x30 _1300 ∧ v == _x30)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_1300) = Node (_x2, _8, _9) in
let (_1297) = Leaf in let (_x5) = subs _x2 in Node (_x5, _1297, _1300) : int tree :
[v:int tree | ∃_x30, (root _x30 _x5 ∧ lch _x30 _1297 ∧ rch _x30 _1300 ∧ v == _x30)]
" ]
  node22 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_1416:[v:int | true]
_1417:[v:int tree | leaf v]
_1418:[v:int tree | leaf v]
_1419:[v:int tree | ∃_x8, (root _x8 _1416 ∧ lch _x8 _1417 ∧ rch _x8 _1418 ∧ v == _x8)]
_1420:[v:int tree | leaf v]
_x31:[v:int tree | ∃_x31, (root _x31 _x5 ∧ lch _x31 _1419 ∧ rch _x31 _1420 ∧ v == _x31)] 
 ⊢ let (_1420) = Leaf in
let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_1419) = Node (_x1, _10, _11) in
let (_x2) = s in let (_x5) = subs _x2 in Node (_x5, _1419, _1420) : int tree :
[v:int tree | ∃_x31, (root _x31 _x5 ∧ lch _x31 _1419 ∧ rch _x31 _1420 ∧ v == _x31)]
" ]
  node23 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x2:[v:int | v == s]
_1554:[v:int tree | leaf v]
_1555:[v:int tree | leaf v]
_1556:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _1554 ∧ rch _x7 _1555 ∧ v == _x7)]
_1557:[v:int tree | leaf v]
_x32:[v:int tree | ∃_x32, (root _x32 _x5 ∧ lch _x32 _1556 ∧ rch _x32 _1557 ∧ v == _x32)] 
 ⊢ let (_1557) = Leaf in
let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_1556) = Node (_x2, _8, _9) in
let (_x5) = subs _x2 in Node (_x5, _1556, _1557) : int tree :
[v:int tree | ∃_x32, (root _x32 _x5 ∧ lch _x32 _1556 ∧ rch _x32 _1557 ∧ v == _x32)]
" ]
  node24 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_1685:[v:int | true]
_1686:[v:int tree | leaf v]
_1687:[v:int tree | leaf v]
_1688:[v:int tree | ∃_x8, (root _x8 _1685 ∧ lch _x8 _1686 ∧ rch _x8 _1687 ∧ v == _x8)]
_1689:[v:int | true]
_1690:[v:int tree | leaf v]
_1691:[v:int tree | leaf v]
_1692:[v:int tree | ∃_x8, (root _x8 _1689 ∧ lch _x8 _1690 ∧ rch _x8 _1691 ∧ v == _x8)]
_x33:[v:int tree | ∃_x33, (root _x33 _x5 ∧ lch _x33 _1688 ∧ rch _x33 _1692 ∧ v == _x33)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_1692) = Node (_x1, _10, _11) in
let (_1688) = Node (_x1, _10, _11) in
let (_x2) = s in let (_x5) = subs _x2 in Node (_x5, _1688, _1692) : int tree :
[v:int tree | ∃_x33, (root _x33 _x5 ∧ lch _x33 _1688 ∧ rch _x33 _1692 ∧ v == _x33)]
" ]
  node25 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_1903:[v:int | true]
_1904:[v:int tree | leaf v]
_1905:[v:int tree | leaf v]
_1906:[v:int tree | ∃_x8, (root _x8 _1903 ∧ lch _x8 _1904 ∧ rch _x8 _1905 ∧ v == _x8)]
_x2:[v:int | v == s]
_1907:[v:int tree | leaf v]
_1908:[v:int tree | leaf v]
_1909:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _1907 ∧ rch _x7 _1908 ∧ v == _x7)]
_x34:[v:int tree | ∃_x34, (root _x34 _x5 ∧ lch _x34 _1906 ∧ rch _x34 _1909 ∧ v == _x34)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_1909) = Node (_x2, _8, _9) in
let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_1906) = Node (_x1, _10, _11) in
let (_x5) = subs _x2 in Node (_x5, _1906, _1909) : int tree :
[v:int tree | ∃_x34, (root _x34 _x5 ∧ lch _x34 _1906 ∧ rch _x34 _1909 ∧ v == _x34)]
" ]
  node26 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x2:[v:int | v == s]
_2137:[v:int tree | leaf v]
_2138:[v:int tree | leaf v]
_2139:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _2137 ∧ rch _x7 _2138 ∧ v == _x7)]
_2140:[v:int | true]
_2141:[v:int tree | leaf v]
_2142:[v:int tree | leaf v]
_2143:[v:int tree | ∃_x8, (root _x8 _2140 ∧ lch _x8 _2141 ∧ rch _x8 _2142 ∧ v == _x8)]
_x35:[v:int tree | ∃_x35, (root _x35 _x5 ∧ lch _x35 _2139 ∧ rch _x35 _2143 ∧ v == _x35)] 
 ⊢ let (_11) = Leaf in
let (_10) = Leaf in
let (_x1) = int_gen () in
let (_2143) = Node (_x1, _10, _11) in
let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_2139) = Node (_x2, _8, _9) in
let (_x5) = subs _x2 in Node (_x5, _2139, _2143) : int tree :
[v:int tree | ∃_x35, (root _x35 _x5 ∧ lch _x35 _2139 ∧ rch _x35 _2143 ∧ v == _x35)]
" ]
  node27 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x2:[v:int | v == s]
_2361:[v:int tree | leaf v]
_2362:[v:int tree | leaf v]
_2363:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _2361 ∧ rch _x7 _2362 ∧ v == _x7)]
_x2:[v:int | v == s]
_2364:[v:int tree | leaf v]
_2365:[v:int tree | leaf v]
_2366:[v:int tree | ∃_x7, (root _x7 _x2 ∧ lch _x7 _2364 ∧ rch _x7 _2365 ∧ v == _x7)]
_x36:[v:int tree | ∃_x36, (root _x36 _x5 ∧ lch _x36 _2363 ∧ rch _x36 _2366 ∧ v == _x36)] 
 ⊢ let (_9) = Leaf in
let (_8) = Leaf in
let (_x2) = s in
let (_2366) = Node (_x2, _8, _9) in
let (_2363) = Node (_x2, _8, _9) in
let (_x5) = subs _x2 in Node (_x5, _2363, _2366) : int tree :
[v:int tree | ∃_x36, (root _x36 _x5 ∧ lch _x36 _2363 ∧ rch _x36 _2366 ∧ v == _x36)]
" ]

  node0 [ shape = box, color = green ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node1
  node2 -> node19
  node3 -> node4
  node4 [ shape = box, color = red ]
  node5 [ shape = box, color = blue ]
  node5 -> node20
  node5 -> node6
  node5 -> node3
  node6 [ shape = box, color = red ]
  node7 -> node8
  node8 [ shape = box, color = red ]
  node9 [ shape = box, color = blue ]
  node9 -> node10
  node9 -> node22
  node9 -> node7
  node10 [ shape = box, color = red ]
  node11 -> node12
  node11 -> node13
  node12 -> node14
  node13 [ shape = box, color = red ]
  node14 [ shape = box, color = red ]
  node15 [ shape = box, color = blue ]
  node15 -> node16
  node15 -> node24
  node15 -> node17
  node15 -> node11
  node16 -> node12
  node16 -> node18
  node16 -> node25
  node17 [ shape = box, color = red ]
  node18 [ shape = box, color = red ]
  node19 [ shape = box, color = red ]
  node20 -> node21
  node21 [ shape = box, color = red ]
  node22 -> node23
  node23 [ shape = box, color = red ]
  node24 -> node26
  node24 -> node25
  node25 -> node27
  node26 [ shape = box, color = red ]
  node27 [ shape = box, color = red ]
}
Type: int
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)]
_x11:[v:int | v == (_x5 - 1)] 
 ⊢ let (_x2) = s in let (_x5) = subs _x2 in subs _x5 : int :
[v:int | v == (_x5 - 1)]
" ]
  node1 [ label = "_x2:[v:int | v == s]
_x5:[v:int | v == (_x2 - 1)] 
 ⊢ let (_x2) = s in subs _x2 : int :
[v:int | v == (_x2 - 1)]
" ]
  node2 [ label = "_x1:[v:int | true] 
 ⊢ int_gen () : int :
[v:int | true]
" ]
  node3 [ label = "_x2:[v:int | v == s] 
 ⊢ s : int :
[v:int | v == s]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = blue ]
  node2 -> node0
  node2 -> node1
  node2 -> node3
  node3 [ shape = box, color = red ]
}
Path Specific Collection:
pathcond_0:[v:unit | ∃x_3, ((x_3 <=> s == 0) ∧ (¬x_3 <=> s > 0) ∧ x_3)]
New Blocks:
Old Blocks:
