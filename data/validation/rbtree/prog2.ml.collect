General Collection:
New Blocks:
Old Blocks:
Type: int rbtree
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x2:[v:int rbtree | rb_leaf v] 
 ⊢ Rbtleaf : int rbtree :
[v:int rbtree | rb_leaf v]
" ]

  node0 [ shape = box, color = green ]
}
Type: bool
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x3:[v:bool | true] 
 ⊢ bool_gen () : bool :
[v:bool | true]
" ]
  node1 [ label = "_x1:[v:bool | ¬v] 
 ⊢ False : bool :
[v:bool | ¬v]
" ]
  node2 [ label = "_x0:[v:bool | v] 
 ⊢ True : bool :
[v:bool | v]
" ]
  node3 [ label = "_x6:[v:bool | v == color] 
 ⊢ color : bool :
[v:bool | v == color]
" ]

  node0 [ shape = box, color = blue ]
  node0 -> node2
  node0 -> node1
  node0 -> node3
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = red ]
  node3 [ shape = box, color = red ]
}
Type: int
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x4:[v:int | true] 
 ⊢ int_gen () : int :
[v:int | true]
" ]
  node1 [ label = "_x5:[v:int | v == inv] 
 ⊢ inv : int :
[v:int | v == inv]
" ]
  node2 [ label = "_x7:[v:int | v == h] 
 ⊢ h : int :
[v:int | v == h]
" ]

  node0 [ shape = box, color = blue ]
  node0 -> node2
  node0 -> node1
  node1 [ shape = box, color = red ]
  node2 [ shape = box, color = red ]
}
Path Specific Collection:
pathcond_0:[v:unit | ∃x_37, ((x_37 <=> h == 0) ∧ (¬x_37 <=> h > 0) ∧ x_37 ∧ ¬color ∧ (∃x_38, x_38))]
New Blocks:
Type: int rbtree
digraph poset {
  label = "Partially Ordered Set"
  size = "8.270000,11.690000"
  ratio = 0.900000
  rotate = 0.000000
  center = 1

  edge [ dir = back ]

  node0 [ label = "_x7:[v:int | v == h]
_x6:[v:bool | v == color]
_x7:[v:int | v == h]
pathcond_0:[v:unit | ∃x_37, ((x_37 <=> h == 0) ∧ (¬x_37 <=> h > 0) ∧ x_37 ∧ ¬color ∧ (∃x_38, x_38))]
_x28:[v:int rbtree | ∃inv_32, (inv_32 >= 0 ∧ inv_32 < inv ∧ inv_32 == _x7 ∧ (∃h_30, (h_30 >= 0 ∧ (_x6 => (h_30 + h_30) == inv_32) ∧ (¬_x6 => ((h_30 + h_30) + 1) == inv_32) ∧ h_30 == _x7 ∧ (∃_x28, (num_black _x28 h_30 ∧ no_red_red _x28 ∧ (_x6 => ¬rb_root_color _x28 true) ∧ (¬_x6 => (h_30 == 0 => ¬rb_root_color _x28 false)) ∧ v == _x28)))))] 
 ⊢ let (_x7) = h in
let (_x26) = rbtree_gen _x7 in
let (_x6) = color in let (_x27) = _x26 _x6 in _x27 _x7 : int rbtree :
[v:int rbtree | ∃inv_32, (inv_32 >= 0 ∧ inv_32 < inv ∧ inv_32 == _x7 ∧ (∃h_30, (h_30 >= 0 ∧ (_x6 => (h_30 + h_30) == inv_32) ∧ (¬_x6 => ((h_30 + h_30) + 1) == inv_32) ∧ h_30 == _x7 ∧ (∃_x28, (num_black _x28 h_30 ∧ no_red_red _x28 ∧ (_x6 => ¬rb_root_color _x28 true) ∧ (¬_x6 => (h_30 == 0 => ¬rb_root_color _x28 false)) ∧ v == _x28)))))]
" ]
  node1 [ label = "_x7:[v:int | v == h]
_80:[v:bool | v]
_x7:[v:int | v == h]
pathcond_0:[v:unit | ∃x_37, ((x_37 <=> h == 0) ∧ (¬x_37 <=> h > 0) ∧ x_37 ∧ ¬color ∧ (∃x_38, x_38))]
_x37:[v:int rbtree | ∃inv_35, (inv_35 >= 0 ∧ inv_35 < inv ∧ inv_35 == _x7 ∧ (∃h_33, (h_33 >= 0 ∧ (_80 => (h_33 + h_33) == inv_35) ∧ (¬_80 => ((h_33 + h_33) + 1) == inv_35) ∧ h_33 == _x7 ∧ (∃_x37, (num_black _x37 h_33 ∧ no_red_red _x37 ∧ (_80 => ¬rb_root_color _x37 true) ∧ (¬_80 => (h_33 == 0 => ¬rb_root_color _x37 false)) ∧ v == _x37)))))] 
 ⊢ let (_x7) = h in
let (_x35) = rbtree_gen _x7 in
let (_80) = True in let (_x36) = _x35 _80 in _x36 _x7 : int rbtree :
[v:int rbtree | ∃inv_35, (inv_35 >= 0 ∧ inv_35 < inv ∧ inv_35 == _x7 ∧ (∃h_33, (h_33 >= 0 ∧ (_80 => (h_33 + h_33) == inv_35) ∧ (¬_80 => ((h_33 + h_33) + 1) == inv_35) ∧ h_33 == _x7 ∧ (∃_x37, (num_black _x37 h_33 ∧ no_red_red _x37 ∧ (_80 => ¬rb_root_color _x37 true) ∧ (¬_80 => (h_33 == 0 => ¬rb_root_color _x37 false)) ∧ v == _x37)))))]
" ]

  node0 [ shape = box, color = red ]
  node1 [ shape = box, color = blue ]
  node1 -> node0
}
Old Blocks:
