(declare-fun mem (Int Int) Bool)
(declare-fun hd (Int Int) Bool)
(declare-fun empty (Int) Bool)
(declare-const s1 Int)
(declare-const s2 Int)
(declare-const v Int)
(declare-const u Int)
(assert (forall ((l Int) (u Int)) (or (not (hd l u)) (mem l u))))
(assert (forall ((l Int) (u Int)) (or (not (empty l)) (not (mem l u)))))
(assert 
(not (exists ((h1 Int)
              (|mem!0,s3,u| Bool)
              (|mem!1,s4,h1| Bool)
              (|mem!2,s4,u| Bool)
              (|mem!3,t1,u| Bool)
              (|hd!0,s4,h1| Bool)
              (|hd!1,s4,u| Bool)
              (|hd!2,t1,u| Bool))
       (let ((a!1 (and (or (not (mem s1 u)) (hd s1 u))
                       (not (empty s1))
                       (hd s1 h1)
                       (or (not |mem!3,t1,u|) |hd!2,t1,u|)
                       (= |mem!0,s3,u| (or |mem!3,t1,u| (mem s2 u)))
                       (or (not |mem!2,s4,u|) |hd!1,s4,u|)
                       |hd!0,s4,h1|
                       (or (not |mem!1,s4,h1|) |hd!0,s4,h1|)
                       (or (not (mem v u)) (hd v u))
                       (hd v h1)
                       (or (not (mem v h1)) (hd v h1))))
             (a!2 (and (or (not (mem s1 u)) (hd s1 u))
                       (or (not (mem s2 u)) (hd s2 u))))
             (a!3 (not (= (mem v u) (or (mem s1 u) (mem s2 u)))))
             (a!4 (not (and (or (empty s1) (mem s1 u))
                            (or (empty s2) (mem s2 u))
                            (or (empty v) (mem v u)))))
             (a!5 (and (empty s1) (or (not (mem v u)) (hd v u)))))
         (or a!1 (not a!2) a!3 a!4 a!5))))
)

(check-sat)
(get-model)
(eval (hd v u))