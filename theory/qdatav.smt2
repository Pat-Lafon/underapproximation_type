(declare-fun mem (Int Int) Bool)
(declare-const x Int)
(declare-const v Int)
(assert (forall ((u Int)) (=> (mem v u) (= u x))))
(assert
               (forall ((|l'| Int))
                            (let ((a!1 (exists ((u Int))
                                         (and (mem |l'| u) (not (= u x)))))
                                  (a!2 (forall ((u Int))
                                         (let ((a!1 (exists ((w Int))
                                                      (and (mem |l'| w)
                                                           (not (= w u))))))
                                           (or (not (mem |l'| u)) a!1))))
                                  (a!3 (exists ((u Int))
                                         (and (mem v u) (not (mem |l'| u))))))
                            (let ((a!4 (and (or (exists ((u Int)) (mem |l'| u))
                                                (exists ((u Int)) (mem v u)))
                                            (or a!2 a!3))))
                              (or (forall ((u Int)) (not (mem |l'| u))) a!1 a!4))))
)

(check-sat)
(get-model)